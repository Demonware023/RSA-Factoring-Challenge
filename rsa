#!/usr/bin/python3

from sys import argv

def gcd(a, b):
    while b:
        a, b = b, a % b
    return a

def pollards_rho(n, c):
    if n % 2 == 0:
        return 2

    x = 2  # Starting value for x
    y = x
    d = 1

    f = lambda x: (x ** 2 + c) % n

    while d == 1:
        x = f(x)
        y = f(f(y))
        d = gcd(abs(x - y), n)

    return d

def factorize_rsa(n):
    if n <= 1:
        return n, 1

    factor = pollards_rho(n, 1)  # Use c=1 as an example, you can experiment with other values
    if factor == n:
        return n, 1
    else:
        return factor, n // factor

def main(file_path):
    with open(file_path, 'r') as file:
        for line in file:
            num = int(line.strip())
            p, q = factorize_rsa(num)
            print("{:d}={:d}*{:d}".format(num, q, p))

if __name__ == "__main__":
    if len(argv) != 2:
        print("Usage: ./rsa <file>")
        exit(1)

    file_path = argv[1]
    main(file_path)
